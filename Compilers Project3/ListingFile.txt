1.	program test (input, output);
2.	  var a : integer;
3.	  var b : real;
4.	  var c : array [1..2] of integer;
5.	
6.	  procedure proc1(x:integer; y:real; 
7.	                  z:array [1..2] of integer; q: real);
8.	    var d: integer;
9.	    begin
10.	      a:= 2;
11.	      z[a] := 4;
12.	      c[3] := 3
13.	     end;
14.	
15.	   procedure proc2(x: integer; y: integer);
16.	     var e: real;
17.	
18.	     procedure proc3(n: integer; z: real);
19.	       var e: integer;
20.	
21.	       procedure proc4(a: integer; z: array [1..3] of real);
22.	         var x: integer;
23.	         begin
24.	           a:= e 
25.	         end;
26.	
27.	       begin
28.	         a:= e;
29.	         e:= c[e]
30.	       end;
31.	
32.	     begin
33.	       call proc1(x, e, c, b);
34.	       call proc3(c[1], e);
35.	       e := e + 4;
	Semantic Error: Type Mismatch simpexpP
36.	       a:= (a mod 4.0) div x;
	Semantic Error: Incompatible Types
37.	       while ((a <= 4.0) and ((b >= e) 
	Semantic Error: Type Mismatch expPP
38.	                       or (not (a = c[a])))) do
39.	         begin
40.	           a:= c[a] + 1
41.	         end
42.	     end;
43.	
44.	begin
45.	  call proc2(c[4], c[5]);
46.	  call proc2(c[4],2);
47.	  call proc2(c[4]);
	Semantic Error: Incorrect Procedure call. Incorrect number of parameters.
48.	  call proc2(c[4],2,3);
	Semantic Error: Incorrect Procedure call. Incorrect number of parameters.
49.	  call proc2(c,2);
	Semantic Error: Incorrect Procedure call. Type mismatch.
50.	  call proc2;
	Semantic Error: Incorrect Procedure call. Incorrect number of parameters.
51.	  call proc3(c[4],2);
	Semantic Error: Incorrect Procedure call. Type mismatch.
52.	  if (a < 2) then a:= 1 else a := a + 2;
53.	  if (b > 4) then a := c[a]
	Semantic Error: Type Mismatch expPP
54.	end.
	Success! Parsing complete
